FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04
# FROM hai4john/10.1-cudnn7-devel-ubuntu18.04:latest
# FROM nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04

############################## SYSTEM PARAMETERS ##############################
# * Arguments
ARG USER=initial
ARG GROUP=initial
ARG UID=1000
ARG GID="${UID}"
ARG SHELL=/bin/bash
ARG HARDWARE=x86_64
ARG ENTRYPOINT_FILE=entrypoint.sh

# * Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all
# ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute

# * Setup users and groups
RUN groupadd --gid "${GID}" "${GROUP}" \
    && useradd --gid "${GID}" --uid "${UID}" -ms "${SHELL}" "${USER}" \
    && mkdir -p /etc/sudoers.d \
    && echo "${USER}:x:${UID}:${UID}:${USER},,,:/home/${USER}:${SHELL}" >> /etc/passwd \
    && echo "${USER}:x:${UID}:" >> /etc/group \
    && echo "${USER} ALL=(ALL) NOPASSWD: ALL" > "/etc/sudoers.d/${USER}" \
    && chmod 0440 "/etc/sudoers.d/${USER}"

# * Replace apt urls
# ? Change to tku
RUN sed -i 's@archive.ubuntu.com@ftp.tku.edu.tw@g' /etc/apt/sources.list
# ? Change to Taiwan
# RUN sed -i 's@archive.ubuntu.com@tw.archive.ubuntu.com@g' /etc/apt/sources.list

# * Time zone
ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/"${TZ}" /etc/localtime && echo "${TZ}" > /etc/timezone

# * Copy custom configuration
# ? Requires docker version >= 17.09
COPY --chmod=0775 ./${ENTRYPOINT_FILE} /entrypoint.sh
COPY --chown="${USER}":"${GROUP}" --chmod=0775 config config
# ? docker version < 17.09
# COPY ./${ENTRYPOINT_FILE} /entrypoint.sh
# COPY config config
# RUN sudo chmod 0775 /entrypoint.sh && \
    # sudo chown -R "${USER}":"${GROUP}" config \
    # && sudo chmod -R 0775 config

############################### INSTALL #######################################
# # * Install packages
RUN apt update \
    && apt install -y --no-install-recommends \
        sudo \
        vim \
        git \
        htop \
        wget \
        cmake \
        curl \
        psmisc \
        # * Shell
        tmux \
        terminator \
        # * base tools
        python3-pip \
        python3-dev \
        python3-setuptools \
        # * ROS depend tools
        lsb-release \
        libgl1 \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# RUN ./config/pip/pip_setup.sh

# # * Install ROS noetic
# RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > \
#     /etc/apt/sources.list.d/ros-latest.list \
#     && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' \
#     --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \
#     && curl -sSL \
#     'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' \
#     | sudo apt-key add - \
#     && apt update && apt install -y --no-install-recommends ros-noetic-desktop-full \
#     && apt-get clean \
#     && rm -rf /var/lib/apt/lists/*

# ENV ROS_DISTRO noetic
# RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >>/home/$USER/.bashrc

# RUN apt update \
#     && apt install -y --no-install-recommends \
#         # * ROS depend tools
#         ros-noetic-ddynamic-reconfigure \
#         ros-noetic-rgbd-launch \
#     && apt clean \
#     && rm -rf /var/lib/apt/lists/*

WORKDIR /

############################## USER CONFIG ####################################
# * Switch user to ${USER}
USER ${USER}

RUN ./config/shell/bash_setup.sh "${USER}" "${GROUP}" \
    && ./config/shell/terminator/terminator_setup.sh "${USER}" "${GROUP}" \
    && ./config/shell/tmux/tmux_setup.sh "${USER}" "${GROUP}" \
    && sudo rm -rf /config



# # # * Create work directory
# # RUN sudo mkdir -p /home/"${USER}"/work/Altek_3D_Camera

# # * Install Altek SDK
# # # ? COPY workable Altek_3D_Camera SDK (v2.49.0)
# # RUN sudo mkdir -p /home/"${USER}"/work/Altek_3D_Camera
# # # WORKDIR /home/"${USER}"/work/
# # COPY ./Altek_3D_Camera /home/"${USER}"/work/Altek_3D_Camera

# # ? Altek_3D_Camera Github (v2.49.0 tag:v67) currently CANNOT detect Altek Camera
# RUN sudo git clone https://github.com/owin1022/Altek_3D_Camera.git /home/"${USER}"/work/Altek_3D_Camera

# WORKDIR /home/"${USER}"/work/Altek_3D_Camera
# RUN sudo mkdir build 
# WORKDIR /home/"${USER}"/work/Altek_3D_Camera/build
# RUN sudo cmake .. -DCMAKE_BUILD_TYPE=Release 
# RUN sudo make uninstall && \
#     sudo make clean && \
#     sudo make -j12 && \
#     sudo make install

# * Switch workspace to ~/work
RUN sudo mkdir -p /home/"${USER}"/work

# # * Install graspnet-baseline
# WORKDIR /home/"${USER}"
# RUN sudo git clone https://github.com/graspnet/graspnet-baseline.git

# WORKDIR /home/"${USER}"/graspnet-baseline/pointnet2
# # RUN sudo python3 /home/"${USER}"/work/graspnet-baseline/pointnet2/setup.py install

# WORKDIR /home/"${USER}"/graspnet-baseline/knn
# # RUN sudo python3 /home/"${USER}"/work/graspnet-baseline/knn/setup.py install

# WORKDIR /home/"${USER}"

# RUN sudo git clone https://github.com/graspnet/graspnetAPI.git
# WORKDIR /home/"${USER}"/graspnetAPI
# RUN sudo pip3 install .

#python3 generate_tolerance_label.py --dataset_root /home/"${USER}"/graspnet-baseline/data/Benchmark/graspnet --num_workers 50

WORKDIR /home/"${USER}"/work

# * Make SSH available
EXPOSE 22

ENTRYPOINT [ "/entrypoint.sh", "terminator" ]
# ENTRYPOINT [ "/entrypoint.sh", "tmux" ]
# ENTRYPOINT [ "/entrypoint.sh", "bash" ]
# ENTRYPOINT [ "/entrypoint.sh" ]
