
FROM ubuntu:20.04
# FROM pytorch/pytorch:1.6.0-cuda10.1-cudnn7-devel
# FROM ubuntu:22.04
# FROM hai4john/10.1-cudnn7-devel-ubuntu18.04:latest
# FROM nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04

############################## SYSTEM PARAMETERS ##############################
# * Arguments
ARG USER=initial
ARG GROUP=initial
ARG UID=1000
ARG GID="${UID}"
ARG SHELL=/bin/bash
ARG HARDWARE=x86_64
ARG ENTRYPOINT_FILE=entrypint.sh

# # * Env vars for the nvidia-container-runtime.
# ENV NVIDIA_VISIBLE_DEVICES all
# ENV NVIDIA_DRIVER_CAPABILITIES all
# # ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute

# * Setup users and groups
RUN groupadd --gid "${GID}" "${GROUP}" \
    && useradd --gid "${GID}" --uid "${UID}" -ms "${SHELL}" "${USER}" \
    && mkdir -p /etc/sudoers.d \
    && echo "${USER}:x:${UID}:${UID}:${USER},,,:/home/${USER}:${SHELL}" >> /etc/passwd \
    && echo "${USER}:x:${UID}:" >> /etc/group \
    && echo "${USER} ALL=(ALL) NOPASSWD: ALL" > "/etc/sudoers.d/${USER}" \
    && chmod 0440 "/etc/sudoers.d/${USER}"

# * Replace apt urls
# ? Change to tku
RUN sed -i 's@archive.ubuntu.com@ftp.tku.edu.tw@g' /etc/apt/sources.list
# ? Change to Taiwan
# RUN sed -i 's@archive.ubuntu.com@tw.archive.ubuntu.com@g' /etc/apt/sources.list

# * Time zone
ENV TZ=Asia/Taipei
RUN ln -snf /usr/share/zoneinfo/"${TZ}" /etc/localtime && echo "${TZ}" > /etc/timezone

# * Copy custom configuration
# ? Requires docker version >= 17.09
COPY --chmod=0775 ./${ENTRYPOINT_FILE} /entrypoint.sh
COPY --chown="${USER}":"${GROUP}" --chmod=0775 config config
# ? docker version < 17.09
# COPY ./${ENTRYPOINT_FILE} /entrypoint.sh
# COPY config config
# RUN sudo chmod 0775 /entrypoint.sh && \
    # sudo chown -R "${USER}":"${GROUP}" config \
    # && sudo chmod -R 0775 config

############################### INSTALL #######################################

# * Install packages
RUN apt update \
    && apt install -y --no-install-recommends \
        sudo \
        vim \
        git \
        htop \
        wget \
        curl \
        psmisc \
        # * Shell
        tmux \
        terminator \
        # * base tools
        python3-pip \
        python3-dev \
        python3-setuptools \
        # * CUDA install
        dirmngr \
        gpg-agent \
        software-properties-common \
        # * gcc g++ for CUDA 10.0
        build-essential \
        gcc-7 \
        g++-7 \
    && add-apt-repository ppa:deadsnakes/ppa -y \
    && apt install -y --no-install-recommends python3.9 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 3 \
    && apt clean \
    && rm -rf /var/lib/apt/lists/*

# PyTorch v1.10.1 CUDA 11.1
# https://pytorch.org/get-started/previous-versions/
RUN pip3 install --upgrade --force-reinstall pip && \
    pip3 install \
    torch==1.10.1+cu111 \
    torchvision==0.11.2+cu111 \
    torchaudio==0.10.1 \
    -f  https://download.pytorch.org/whl/cu111/torch_stable.html

RUN ./config/pip/pip_setup.sh

############################## USER CONFIG ####################################
# * Switch user to ${USER}
USER ${USER}

RUN ./config/shell/bash_setup.sh "${USER}" "${GROUP}" \
    && ./config/shell/terminator/terminator_setup.sh "${USER}" "${GROUP}" \
    && ./config/shell/tmux/tmux_setup.sh "${USER}" "${GROUP}" \
    && sudo rm -rf /config

# * Install gcc-7, g++-7 along with gcc-9, g++-9
#https://www.cyberciti.biz/faq/creating-soft-link-or-symbolic-link/
#https://blog.csdn.net/u013187057/article/details/84996127
#https://linuxconfig.org/how-to-switch-between-multiple-gcc-and-g-compiler-versions-on-ubuntu-20-04-lts-focal-fossa
#https://blog.csdn.net/JasonDing1354/article/details/50470109
#https://then.tw/switch-gcc-versions-with-update-alternatives/
#https://webcache.googleusercontent.com/search?q=cache:8-Y-ocN92UgJ:https://www.jianshu.com/p/08d08713f0d1&cd=16&hl=zh-TW&ct=clnk&gl=tw&client=ubuntu-sn
RUN sudo apt update \
    # && sudo apt install -y --no-install-recommends \
    # build-essential \
    # gcc-7 \
    # g++-7 \
    # && sudo apt clean \
    # && sudo rm -rf /var/lib/apt/lists/* \
    && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 \
    && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 70 \
    && sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 \
    && sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90 \
    && sudo ln -s -f /usr/bin/gcc-7* /etc/alternatives/gcc \
    && sudo ln -s -f /usr/bin/g++-7* /etc/alternatives/g++
    # && sudo update-alternatives --skip-auto gcc \ 
    # && sudo update-alternatives --skip-auto g++

# ll /usr/bin/gcc*
# ll /usr/bin/g++*
# ll /etc/alternatives/gcc*
# gcc --version

# * Install CUDA 10.0
#https://developer.nvidia.com/cuda-10.1-download-archive-base?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=debnetwork
RUN sudo wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64 \
    && sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64 \
    && sudo apt-key add /var/cuda-repo-10-0-local-10.0.130-410.48/7fa2af80.pub \
    && sudo apt-get update \
    && sudo apt-get install -y --no-install-recommends cuda-toolkit-10-0 \
    && sudo apt clean \
    && sudo rm -rf /var/lib/apt/lists/*


# * Install CUDA 11.1
#https://developer.nvidia.com/cuda-11.1.0-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=2004&target_type=debnetwork
RUN sudo wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \
    sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub && \
    sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" && \
    sudo apt-get update && \
    sudo apt-get -y install cuda && \
    sudo apt clean && \
    sudo rm -rf /var/lib/apt/lists/*

#cat /usr/local/cuda/version.txt
#nvcc  --version

# * Install Cudnn
#https://zhuanlan.zhihu.com/p/487941231

# * Install graspnet-baseline
WORKDIR /home/"${USER}"
RUN sudo git clone https://github.com/graspnet/graspnet-baseline.git
# WORKDIR /home/"${USER}"/graspnet-baseline/pointnet2
# RUN sudo python3 setup.py install

# WORKDIR /home/"${USER}"/graspnet-baseline/knn
# RUN sudo python3 setup.py install

# * Install graspnetAPI
WORKDIR /home/"${USER}"
RUN sudo git clone https://github.com/graspnet/graspnetAPI.git
# WORKDIR /home/"${USER}"/graspnetAPI
# RUN sudo pip3 install .


# * Create work folder
RUN sudo mkdir -p /home/"${USER}"/work
WORKDIR /home/"${USER}"/work

# * Make SSH available
EXPOSE 22

ENTRYPOINT [ "/entrypoint.sh", "terminator" ]
# ENTRYPOINT [ "/entrypoint.sh", "tmux" ]
# ENTRYPOINT [ "/entrypoint.sh", "bash" ]
# ENTRYPOINT [ "/entrypoint.sh" ]
